// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SBTMinted extends ethereum.Event {
  get params(): SBTMinted__Params {
    return new SBTMinted__Params(this);
  }
}

export class SBTMinted__Params {
  _event: SBTMinted;

  constructor(event: SBTMinted) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get soulId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get donation(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SignerChanged extends ethereum.Event {
  get params(): SignerChanged__Params {
    return new SignerChanged__Params(this);
  }
}

export class SignerChanged__Params {
  _event: SignerChanged;

  constructor(event: SignerChanged) {
    this._event = event;
  }

  get oldSigner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newSigner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class test extends ethereum.SmartContract {
  static bind(address: Address): test {
    return new test("test", address);
  }

  _cachedChainId(): BigInt {
    let result = super.call("_cachedChainId", "_cachedChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try__cachedChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_cachedChainId",
      "_cachedChainId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  signer(): Address {
    let result = super.call("signer", "signer():(address)", []);

    return result[0].toAddress();
  }

  try_signer(): ethereum.CallResult<Address> {
    let result = super.tryCall("signer", "signer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verifySignature(
    to: Address,
    soulId: BigInt,
    mintPrice: BigInt,
    deadline: BigInt,
    chainId: BigInt,
    nonces: BigInt,
    signature: Bytes,
  ): boolean {
    let result = super.call(
      "verifySignature",
      "verifySignature(address,uint256,uint256,uint256,uint256,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(soulId),
        ethereum.Value.fromUnsignedBigInt(mintPrice),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromUnsignedBigInt(nonces),
        ethereum.Value.fromBytes(signature),
      ],
    );

    return result[0].toBoolean();
  }

  try_verifySignature(
    to: Address,
    soulId: BigInt,
    mintPrice: BigInt,
    deadline: BigInt,
    chainId: BigInt,
    nonces: BigInt,
    signature: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifySignature",
      "verifySignature(address,uint256,uint256,uint256,uint256,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(soulId),
        ethereum.Value.fromUnsignedBigInt(mintPrice),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromUnsignedBigInt(nonces),
        ethereum.Value.fromBytes(signature),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  wtfsbt(): Address {
    let result = super.call("wtfsbt", "wtfsbt():(address)", []);

    return result[0].toAddress();
  }

  try_wtfsbt(): ethereum.CallResult<Address> {
    let result = super.tryCall("wtfsbt", "wtfsbt():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get sbtAddr_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get signer_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get soulId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mintPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RecoverCall extends ethereum.Call {
  get inputs(): RecoverCall__Inputs {
    return new RecoverCall__Inputs(this);
  }

  get outputs(): RecoverCall__Outputs {
    return new RecoverCall__Outputs(this);
  }
}

export class RecoverCall__Inputs {
  _call: RecoverCall;

  constructor(call: RecoverCall) {
    this._call = call;
  }

  get oldOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RecoverCall__Outputs {
  _call: RecoverCall;

  constructor(call: RecoverCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetSignerCall extends ethereum.Call {
  get inputs(): SetSignerCall__Inputs {
    return new SetSignerCall__Inputs(this);
  }

  get outputs(): SetSignerCall__Outputs {
    return new SetSignerCall__Outputs(this);
  }
}

export class SetSignerCall__Inputs {
  _call: SetSignerCall;

  constructor(call: SetSignerCall) {
    this._call = call;
  }

  get newSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSignerCall__Outputs {
  _call: SetSignerCall;

  constructor(call: SetSignerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
